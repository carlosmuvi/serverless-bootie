service: reactbootie-server

provider:
  name: aws
  runtime: nodejs4.3
  profile: ${opt:profile}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-offline
  - serverless-babel-plugin


functions:
  hello:
    handler: handlers.hello
    events:
      - http:
          path: hello
          method: get
          integration: lambda
          cors: true
  getEvents:
    handler: handlers.getEvents
    events:
      - http:
          path: events
          method: get
          integration: lambda
          cors: true

resources:
  Resources:
    EventsDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  babelPresets:
    - latest

  serverless-offline:
      babelOptions:
        presets:
          - es2015